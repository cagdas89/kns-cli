#!/usr/bin/env node

/**
 *
 * API: http://visionmedia.github.io/commander.js/
 * <requiredCommandOrOption>
 * [optionalCommandOrOption]
 *
 */

var program = require("commander");
var path = require("path");
var pkg = require("../package.json");
var Promise = require("bluebird");
var clc = require("cli-color");

var appfinder = require("../lib/appfinder");
var foldercheck = require("../lib/foldercheck");
var migration = require("../lib/migration");
var plugin = require("../lib/plugin");

var appName;
var pkgPath;

program.version(pkg.version);


/**
 * Creates test directory in app root if not exist and file with given name from
 * test template.
 */

// TODO: cado

/**
 * Creates migration file with given name from
 * migration template.
 */
program
    .command("migration [migrationName]")
    .description("Creates migration file.")
    .action(function (migrationName) {
        if ( !migrationName ) {
            // TODO: Run migrations
            return;
        }
        appfinder(path.resolve(process.cwd())).then(function (packagePath) {
            pkgPath = packagePath;
            appName = require(path.join(pkgPath, "package.json")).name;
            return foldercheck(path.join(pkgPath, "plugins"), "database");
        }).then(function (isExist) {
            if ( isExist ) {
                return migration(path.join(pkgPath, "plugins/database/migrations"), migrationName);
            }
            else {
                throw new Error("Database plugin can not be found. It must be created first.");
            }
        }).then(function () {
            console.log("--------------------------------------------");
            console.log("New migration file " + clc.red.bold(migrationName) + " was added to " + clc.blue.bold(appName) + "\'s database/migration folder.");
            console.log("--------------------------------------------");
        }).catch(function (e) {
            printError(e.message);
        });
    });

/**
 * Creates plugin directory and file with given name from
 * migration template.
 */

program
    .command("plugin [pluginName]")
    .description("Creates plugin directory and file")
    .option("-d, --dependent [dependentPluginName]", "Dependent plugin name")
    .action(function (pluginName, options) {
        if ( !pluginName ) {
            printError("pluginName must be specified");
            return;
        }
        appfinder(path.resolve(process.cwd())).then(function (packagePath) {
            pkgPath = packagePath;
            appName = require(path.join(pkgPath, "package.json")).name;
            return foldercheck(path.join(pkgPath, "plugins"), pluginName);
        }).then(function (isExist) {
            if ( isExist ) {
                throw new Error(pluginName + " plugin exist. Plugins must have unique names.");
            }
            else {
                return plugin(path.join(pkgPath, "plugins"), pluginName, options.dependent);
            }
        }).then(function () {
            console.log("--------------------------------------------");
            console.log("New plugin " + clc.red.bold(pluginName) + " was added to " + clc.blue.bold(appName) + "\'s plugin folder.");
            console.log("--------------------------------------------");
        }).catch(function (e) {
            printError(e.message);
        });
    });


program
    .command("help")
    .action(function () {
        console.log("--------------------------------------------");
        console.log("Unknown command pls type " + clc.red.bold("kns --help") + " for available commands.");
        console.log("--------------------------------------------");
    });

program.parse(process.argv);

function printError(message) {
    console.log("--------------------------------------------");
    console.log(clc.red.bold("Error: ") + message);
    console.log("--------------------------------------------");
}